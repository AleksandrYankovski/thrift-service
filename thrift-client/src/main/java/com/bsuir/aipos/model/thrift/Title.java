/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bsuir.aipos.model.thrift;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.*;

public class Title implements org.apache.thrift.TBase<Title, Title._Fields>, java.io.Serializable, Cloneable, Comparable<Title> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Title");

  private static final org.apache.thrift.protocol.TField SPORTSMAN_FULL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sportsmanFullName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AUTHOR_PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("authorPhoneNumber", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TitleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TitleTupleSchemeFactory());
  }

  public String sportsmanFullName; // required
  public String authorPhoneNumber; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPORTSMAN_FULL_NAME((short)1, "sportsmanFullName"),
    AUTHOR_PHONE_NUMBER((short)2, "authorPhoneNumber");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPORTSMAN_FULL_NAME
          return SPORTSMAN_FULL_NAME;
        case 2: // AUTHOR_PHONE_NUMBER
          return AUTHOR_PHONE_NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPORTSMAN_FULL_NAME, new org.apache.thrift.meta_data.FieldMetaData("sportsmanFullName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR_PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("authorPhoneNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Title.class, metaDataMap);
  }

  public Title() {
  }

  public Title(
    String sportsmanFullName,
    String authorPhoneNumber)
  {
    this();
    this.sportsmanFullName = sportsmanFullName;
    this.authorPhoneNumber = authorPhoneNumber;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Title(Title other) {
    if (other.isSetSportsmanFullName()) {
      this.sportsmanFullName = other.sportsmanFullName;
    }
    if (other.isSetAuthorPhoneNumber()) {
      this.authorPhoneNumber = other.authorPhoneNumber;
    }
  }

  public Title deepCopy() {
    return new Title(this);
  }

  @Override
  public void clear() {
    this.sportsmanFullName = null;
    this.authorPhoneNumber = null;
  }

  public String getSportsmanFullName() {
    return this.sportsmanFullName;
  }

  public Title setSportsmanFullName(String sportsmanFullName) {
    this.sportsmanFullName = sportsmanFullName;
    return this;
  }

  public void unsetSportsmanFullName() {
    this.sportsmanFullName = null;
  }

  /** Returns true if field sportsmanFullName is set (has been assigned a value) and false otherwise */
  public boolean isSetSportsmanFullName() {
    return this.sportsmanFullName != null;
  }

  public void setSportsmanFullNameIsSet(boolean value) {
    if (!value) {
      this.sportsmanFullName = null;
    }
  }

  public String getAuthorPhoneNumber() {
    return this.authorPhoneNumber;
  }

  public Title setAuthorPhoneNumber(String authorPhoneNumber) {
    this.authorPhoneNumber = authorPhoneNumber;
    return this;
  }

  public void unsetAuthorPhoneNumber() {
    this.authorPhoneNumber = null;
  }

  /** Returns true if field authorPhoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorPhoneNumber() {
    return this.authorPhoneNumber != null;
  }

  public void setAuthorPhoneNumberIsSet(boolean value) {
    if (!value) {
      this.authorPhoneNumber = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPORTSMAN_FULL_NAME:
      if (value == null) {
        unsetSportsmanFullName();
      } else {
        setSportsmanFullName((String)value);
      }
      break;

    case AUTHOR_PHONE_NUMBER:
      if (value == null) {
        unsetAuthorPhoneNumber();
      } else {
        setAuthorPhoneNumber((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPORTSMAN_FULL_NAME:
      return getSportsmanFullName();

    case AUTHOR_PHONE_NUMBER:
      return getAuthorPhoneNumber();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SPORTSMAN_FULL_NAME:
      return isSetSportsmanFullName();
    case AUTHOR_PHONE_NUMBER:
      return isSetAuthorPhoneNumber();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Title)
      return this.equals((Title)that);
    return false;
  }

  public boolean equals(Title that) {
    if (that == null)
      return false;

    boolean this_present_sportsmanFullName = true && this.isSetSportsmanFullName();
    boolean that_present_sportsmanFullName = true && that.isSetSportsmanFullName();
    if (this_present_sportsmanFullName || that_present_sportsmanFullName) {
      if (!(this_present_sportsmanFullName && that_present_sportsmanFullName))
        return false;
      if (!this.sportsmanFullName.equals(that.sportsmanFullName))
        return false;
    }

    boolean this_present_authorPhoneNumber = true && this.isSetAuthorPhoneNumber();
    boolean that_present_authorPhoneNumber = true && that.isSetAuthorPhoneNumber();
    if (this_present_authorPhoneNumber || that_present_authorPhoneNumber) {
      if (!(this_present_authorPhoneNumber && that_present_authorPhoneNumber))
        return false;
      if (!this.authorPhoneNumber.equals(that.authorPhoneNumber))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Title other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSportsmanFullName()).compareTo(other.isSetSportsmanFullName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSportsmanFullName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sportsmanFullName, other.sportsmanFullName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorPhoneNumber()).compareTo(other.isSetAuthorPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorPhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorPhoneNumber, other.authorPhoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Title(");
    boolean first = true;

    sb.append("sportsmanFullName:");
    if (this.sportsmanFullName == null) {
      sb.append("null");
    } else {
      sb.append(this.sportsmanFullName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorPhoneNumber:");
    if (this.authorPhoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.authorPhoneNumber);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TitleStandardSchemeFactory implements SchemeFactory {
    public TitleStandardScheme getScheme() {
      return new TitleStandardScheme();
    }
  }

  private static class TitleStandardScheme extends StandardScheme<Title> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Title struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPORTSMAN_FULL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sportsmanFullName = iprot.readString();
              struct.setSportsmanFullNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUTHOR_PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorPhoneNumber = iprot.readString();
              struct.setAuthorPhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Title struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sportsmanFullName != null) {
        oprot.writeFieldBegin(SPORTSMAN_FULL_NAME_FIELD_DESC);
        oprot.writeString(struct.sportsmanFullName);
        oprot.writeFieldEnd();
      }
      if (struct.authorPhoneNumber != null) {
        oprot.writeFieldBegin(AUTHOR_PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.authorPhoneNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TitleTupleSchemeFactory implements SchemeFactory {
    public TitleTupleScheme getScheme() {
      return new TitleTupleScheme();
    }
  }

  private static class TitleTupleScheme extends TupleScheme<Title> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Title struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSportsmanFullName()) {
        optionals.set(0);
      }
      if (struct.isSetAuthorPhoneNumber()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSportsmanFullName()) {
        oprot.writeString(struct.sportsmanFullName);
      }
      if (struct.isSetAuthorPhoneNumber()) {
        oprot.writeString(struct.authorPhoneNumber);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Title struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.sportsmanFullName = iprot.readString();
        struct.setSportsmanFullNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.authorPhoneNumber = iprot.readString();
        struct.setAuthorPhoneNumberIsSet(true);
      }
    }
  }

}

